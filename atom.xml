<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小贺今天有认真学习吗</title>
  
  <subtitle>昨日恍如隔世，少年砥砺向前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hoyyy.com/"/>
  <updated>2019-03-24T03:40:27.456Z</updated>
  <id>http://hoyyy.com/</id>
  
  <author>
    <name>Christopher Hoy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>快速转入Python笔记</title>
    <link href="http://hoyyy.com/2019/03/24/%E5%BF%AB%E9%80%9F%E8%BD%AC%E5%85%A5Python%E7%AC%94%E8%AE%B0/"/>
    <id>http://hoyyy.com/2019/03/24/快速转入Python笔记/</id>
    <published>2019-03-24T03:22:30.000Z</published>
    <updated>2019-03-24T03:40:27.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是一份笔记，旨在快速入门Python，阅读前提是有其他面向对象编程的经验，比如C++或者Java。所有内容只涉及Python3。全文参考《Python编程 从入门到实践》，了解详情可参考该书。</p><h2 id="1-变量和简单类型"><a href="#1-变量和简单类型" class="headerlink" title="1. 变量和简单类型"></a>1. 变量和简单类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印的Function，Python中不需要;结束语句</span></span><br><span class="line">print()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#双引号和单引号都可以用来表示字符串</span></span><br><span class="line"><span class="string">'abc'</span>, <span class="string">"abc"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#title() Method 使首字母变成大写</span></span><br><span class="line"><span class="comment">#顺便注意，Python中不需要进行显示类型声明</span></span><br><span class="line">name = <span class="string">'abc'</span></span><br><span class="line">print(name.title())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#upper() Method 使字符串全变为大写</span></span><br><span class="line">name.upper()</span><br><span class="line"><span class="comment">#lower() Method 使字符串全变为小写</span></span><br><span class="line">name.lower()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串可以直接相加</span></span><br><span class="line">name += <span class="string">"abc"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串的rstrip() Method 临时性去掉末尾的空白字符</span></span><br><span class="line">name.rstrip()</span><br><span class="line"><span class="comment">#字符串的lstrip() Method 临时性去掉开头的空白字符</span></span><br><span class="line">name.lstrip()</span><br><span class="line"><span class="comment">#字符串的strip() Method 临时性去掉开头和结尾的空白字符</span></span><br><span class="line">name.strip()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在python中 ** 表示乘方</span></span><br><span class="line">age = <span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="comment">#age为9</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#str() Function 将非字符串值转化为字符串值</span></span><br><span class="line">agestr = str(<span class="number">23</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在python3中 整数 除以 整数 除不尽会得到 小数</span></span><br></pre></td></tr></table></figure><h2 id="2-列表简介"><a href="#2-列表简介" class="headerlink" title="2. 列表简介"></a>2. 列表简介</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#中括号初始化，允许一个列表存不同类型的值</span></span><br><span class="line">names = [<span class="string">'Bob'</span>, <span class="string">'Jan'</span>, <span class="number">12</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#append() Method 在列表末尾添加元素</span></span><br><span class="line">names.append(<span class="string">'John'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#insert() Method 在任何位置添加新元素</span></span><br><span class="line">names.insert(<span class="number">0</span>, <span class="string">'Chris'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#del 关键字 删除给出位置的列表元素</span></span><br><span class="line"><span class="keyword">del</span> names[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pop() Method 删除列表末尾的元素，并返回删除的值</span></span><br><span class="line">poped_name = names.pop()</span><br><span class="line"><span class="comment">#pop() Method 也可以弹出任意位置的元素</span></span><br><span class="line">poped_name = names.pop(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remove() Method 根据值删除*第一次*出现的该元素</span></span><br><span class="line">names.remove(<span class="string">'John'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sort() Method 永久让列表升序排列</span></span><br><span class="line">names.sort()</span><br><span class="line"><span class="comment">#降序则需传递reverse参数</span></span><br><span class="line">names.sort(reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sorted() Function 临时性排序</span></span><br><span class="line">sorted(names)</span><br><span class="line"><span class="comment">#降序也需要传递reverse参数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reverse() Method 永久性反转列表元素</span></span><br><span class="line">names.reverse()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#len() Function 获得列表长度</span></span><br><span class="line">len(names)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#任何时候都可以使用-1索引访问列表最后一个元素，除了空列表</span></span><br><span class="line">names[<span class="number">-1</span>]</span><br><span class="line"><span class="comment">#实际上用负数会从列表尾部开始访问</span></span><br><span class="line">names[<span class="number">-2</span>]</span><br></pre></td></tr></table></figure><h2 id="3-列表操作"><a href="#3-列表操作" class="headerlink" title="3. 列表操作"></a>3. 列表操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#for循环，传值而非引用，所有代码块靠缩进确定范围</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#range() Function 生成一系列数字，比如 1 到 8 - 1 的所有整数</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">8</span>):</span><br><span class="line">pirnt(val)</span><br><span class="line"><span class="comment">#range() Function 生成列表，这个列表包含 1 到 8 - 1 的所有整数</span></span><br><span class="line">numbers = list(range(<span class="number">1</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment">#range() Function 制定生成数字之间的步长，下面步长是2</span></span><br><span class="line">odd_numbers = list(range(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment">#1, 3, 5, 7, 9</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#min() Function 返回列表最小值</span></span><br><span class="line">min(numbers)</span><br><span class="line"><span class="comment">#max() Function 返回列表最大值</span></span><br><span class="line">max(numbers)</span><br><span class="line"><span class="comment">#sum() Function 返回列表元素值总和</span></span><br><span class="line">sum(numbers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用列表解析创建列表，下面的创建了一个 2 到 28 的所有偶数</span></span><br><span class="line">double_nums = [val * <span class="number">2</span> <span class="keyword">for</span> val <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">15</span>)]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用切片获得列表的一部分，比如下面是索引 1 到 3 - 1 的子列表</span></span><br><span class="line">sub_numbers = numbers[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="comment">#从索引 0 到 4 - 1 的子列表</span></span><br><span class="line">sub_numbers = numbers[:<span class="number">4</span>]</span><br><span class="line"><span class="comment">#从索引 1 到最后的子列表</span></span><br><span class="line">sub_numbers = numbers[<span class="number">1</span>:]</span><br><span class="line"><span class="comment">#最后三个的子列表</span></span><br><span class="line">sub_numbers = numbers[<span class="number">-3</span>:]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制列表需要如下：</span></span><br><span class="line">copy_numbers = Numbers[:]</span><br><span class="line"><span class="comment">#直接赋值名字是传引用</span></span><br><span class="line">refer_numbers = Numbers</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组是不可变的列表，用小括号初始化</span></span><br><span class="line">dimensions = (<span class="number">100</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组虽不可修改，但可以重新赋值</span></span><br><span class="line">dimensions = (<span class="number">120</span>, <span class="number">15</span>)</span><br><span class="line">dimensions = (<span class="number">140</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure><h2 id="4-if语句"><a href="#4-if语句" class="headerlink" title="4. if语句"></a>4. if语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> name = <span class="string">'Chris'</span>:</span><br><span class="line">print(name)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'Error'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#and, or替代了&amp;&amp; 和 ||</span></span><br><span class="line">age &gt; <span class="number">12</span> <span class="keyword">and</span> age &lt; <span class="number">20</span></span><br><span class="line">age_1 &gt; <span class="number">14</span> <span class="keyword">or</span> age_2 &gt; <span class="number">14</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#in 关键字也可以用来判断列表是否包含某值</span></span><br><span class="line">isThereACat = <span class="string">'cat'</span> <span class="keyword">in</span> animals</span><br><span class="line"><span class="comment">#加上not 就可以表否定</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'cat'</span> <span class="keyword">not</span> <span class="keyword">in</span> animals:</span><br><span class="line">print(<span class="string">'Not here'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#True 和 False 首字母大写</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#elif</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line"><span class="comment">#do somthing</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">8</span>:</span><br><span class="line"><span class="comment">#do something</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment">#do something</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表名本身作判断条件是代表其是否为空</span></span><br><span class="line"><span class="keyword">if</span> names:</span><br><span class="line">print(<span class="string">'Not Empty'</span>)</span><br></pre></td></tr></table></figure><h2 id="5-字典"><a href="#5-字典" class="headerlink" title="5. 字典"></a>5. 字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#大括号表字典，其中value值可以在同一个字典中为各种不同类型</span></span><br><span class="line"><span class="comment">#实际上key类型也可以为几种不同的基本类型，但是像字典这种就不能作为key了</span></span><br><span class="line"><span class="comment">#而字典和列表是可以作为value的</span></span><br><span class="line">student = &#123;<span class="string">'Name'</span>:<span class="string">'Hoy'</span>, <span class="string">'Scores'</span>:<span class="number">92</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加新的键值对，直接新的键赋值就行</span></span><br><span class="line"><span class="comment">#修改值也是相同的操作</span></span><br><span class="line">student[<span class="string">'Gender'</span>] = <span class="string">'Male'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用del 关键字删除字典中元素</span></span><br><span class="line"><span class="keyword">del</span> student[<span class="string">'Gender'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历字典，items() Method 返回键值对列表</span></span><br><span class="line"><span class="comment">#遍历顺序和存储顺序可能不一样</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> student.items():</span><br><span class="line">print(k, v)</span><br><span class="line"><span class="comment">#keys() Method 只返回key的列表</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> student.keys():</span><br><span class="line">print(k)</span><br><span class="line"><span class="comment">#按顺序遍历key值</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> sorted(student.keys()):</span><br><span class="line">print(k)</span><br><span class="line"><span class="comment">#values() Method 只返回value的列表</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> student.values():</span><br><span class="line">print(v)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用set存储元素不重复的集合</span></span><br><span class="line"><span class="keyword">for</span> uv <span class="keyword">in</span> set(student.values()):</span><br><span class="line">print(uv)</span><br></pre></td></tr></table></figure><h2 id="6-用户输入和while循环"><a href="#6-用户输入和while循环" class="headerlink" title="6. 用户输入和while循环"></a>6. 用户输入和while循环</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#input() Function 的参数是提示信息，接下来用户输入以回车结束</span></span><br><span class="line"><span class="comment">#input() 返回的是输入的字符串</span></span><br><span class="line">message = input(<span class="string">"Please input something"</span>)</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#int() Function 将数字的字符串表示转换为数值表示</span></span><br><span class="line"><span class="comment">#复习：与之相反的是str() Function</span></span><br><span class="line">age = input(<span class="string">"Your age"</span>)</span><br><span class="line">age = int(age)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#while循环</span></span><br><span class="line">counter = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> counter &gt; <span class="number">0</span>:</span><br><span class="line"><span class="comment">#do something</span></span><br><span class="line">couter -= <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除包含特定值的所有列表元素</span></span><br><span class="line"><span class="comment">#in关键字可以作为布尔表达式</span></span><br><span class="line"><span class="keyword">while</span> <span class="string">'cat'</span> <span class="keyword">in</span> pets:</span><br><span class="line">pets.remove(<span class="string">'cat'</span>)</span><br></pre></td></tr></table></figure><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关键字def创建函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(num)</span>:</span></span><br><span class="line">print(<span class="string">"This is a function"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#传递实参可以通过位置实参，即传统的传递方式</span></span><br><span class="line"><span class="comment">#也可以通过关键字实参，那么其位置无关紧要，如下</span></span><br><span class="line">func1(num=biggerNum)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数可以通过赋值指定默认值，实参则可以改变它</span></span><br><span class="line"><span class="comment">#指定了参数默认值的函数可以不需要提供对应实参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(age=<span class="number">18</span>)</span>:</span></span><br><span class="line">print(age)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数不需要指定返回类型，可以有也可以没有return</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(tag)</span>:</span></span><br><span class="line"><span class="keyword">return</span> tage + <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#传递切片从而传递列表的拷贝，使函数不会改变远来的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func4</span><span class="params">(names)</span>:</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">name += <span class="string">"'s"</span></span><br><span class="line">func4(names[:])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#传递任意数量的实参</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func5</span><span class="params">(*coes)</span>:</span></span><br><span class="line"><span class="keyword">for</span> coe <span class="keyword">in</span> coes:</span><br><span class="line">print(coe)</span><br><span class="line"><span class="comment">#*号创建一个名为coes的元组，所有实参都在里面</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#传递未知数量未知作用的实参，通过**创建字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func6</span><span class="params">(**dic)</span>:</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dic.items():</span><br><span class="line">print(k, v)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入文件，需要用点语法调用其函数</span></span><br><span class="line"><span class="keyword">import</span> filename</span><br><span class="line"><span class="comment">#或只导特定函数，不需要点语法调用这个函数</span></span><br><span class="line"><span class="keyword">from</span> filename <span class="keyword">import</span> funcname</span><br><span class="line"><span class="comment">#用as指定别名</span></span><br><span class="line"><span class="keyword">from</span> filename <span class="keyword">import</span> funcname <span class="keyword">as</span> fn</span><br><span class="line"><span class="keyword">import</span> filename <span class="keyword">as</span> f</span><br><span class="line"><span class="comment">#使用*导入所有函数，则不需要点语法调用所有函数</span></span><br><span class="line"><span class="keyword">from</span> filename <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数命名应该只有小写字母和下划线</span></span><br></pre></td></tr></table></figure><h2 id="8-类"><a href="#8-类" class="headerlink" title="8. 类"></a>8. 类</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#class关键字用来创建类，类名应该首字母大写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line"><span class="comment">#do initialization</span></span><br><span class="line">self.name = name</span><br><span class="line">self.age = age</span><br><span class="line"><span class="comment">#指定属性的默认值</span></span><br><span class="line">self.legs = <span class="number">4</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="comment">#do something</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#__init__() Method 是必不可少的</span></span><br><span class="line"><span class="comment">#初始化函数形参self是必不可少的</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性是在初始化方法中创建的，没有一个单独的属性列表</span></span><br><span class="line"><span class="comment">#可以通过类实例的点语法访问其属性</span></span><br><span class="line"><span class="comment">#可以通过点语法修改属性，但最好创建一个修改的方法</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#继承，括号参数里是父类</span></span><br><span class="line"><span class="comment">#初始化方法调用父类初始化方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">whiteDog</span><span class="params">(Dog)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">super().__init__(name, age)</span><br><span class="line"><span class="comment">#子类特有的属性</span></span><br><span class="line">self.color = <span class="string">'white'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重写（Override）父类的方法</span></span><br><span class="line"><span class="comment">#只需要相同的函数名再定义一次即可</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python大量的外部库可以参考</span></span><br><span class="line"><span class="comment">#Python Module of the Week</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章是一份笔记，旨在快速入门Python，阅读前提是有其他面向对象编程的经验，比如C++或者Java。所有内容只涉及Python3。全文
      
    
    </summary>
    
      <category term="Python Language" scheme="http://hoyyy.com/categories/Python-Language/"/>
    
    
      <category term="Python" scheme="http://hoyyy.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>用Python实现的遗传算法解决零一背包问题</title>
    <link href="http://hoyyy.com/2019/03/21/%E7%94%A8Python%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E8%A7%A3%E5%86%B3%E9%9B%B6%E4%B8%80%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://hoyyy.com/2019/03/21/用Python实现的遗传算法解决零一背包问题/</id>
    <published>2019-03-21T04:28:36.000Z</published>
    <updated>2019-04-08T02:51:57.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在上智能优化技术的课程，它主要讨论的是使系统达到最优的目标的算法，通常是找到某个多变量函数的极大值或者极小值。因为在实际工程问题中，有很多目标函数没有办法用我们所学高等数学中标准的最大最小值求值方法，比如Rastrigin Function：<br><img src="Rastrigin.png" alt><br>面对这种函数传统的数学方法就显得有点无力了。</p><p>而智能优化算法就是要解决这类复杂问题。常见的智能优化算法有：遗传算法（Genetic Algorithm）、差分演化算法（Differential Evolution）、免疫算法（Immune Algorithm）、蚁群算法（Ant Colony Optimization）、粒子群算法（Particle Swarm Optimization）、模拟退火算法（Simulated Annealing）、禁忌搜索算法（Tabu Search）等等。这些算法从某些自然现象中受到启发，比如粒子群算法模拟的就是鸟类捕食的过程，鸟群成员可以通过个体间的信息交流与共享获得其他个体的发现与飞行经历。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>本文将处理的是一个经典的算法问题——零一背包问题。即给定一个背包的大小（Capacity），已知有N种不同的物品，给出它们所占的空间（Space），以及它们所对应的价值（Value），要求求出在不超过背包容量下能装下的最大的物品价值量（MaxValue）。</p><p>以前做算法题的时候了解过动态规划解决这个问题的方法，如果大家有兴趣的话在网上可以搜到相应的解决代码。我这里提供一种用Python实现遗传算法解决零一背包问题的方法。</p><h2 id="代码运行前"><a href="#代码运行前" class="headerlink" title="代码运行前"></a>代码运行前</h2><ol><li>你的电脑需要安装Python3</li><li>你需要安装Numpy</li><li>如果你想看到绘图结果你还需要安装Matplotlib</li></ol><h2 id="算法代码剖析"><a href="#算法代码剖析" class="headerlink" title="算法代码剖析"></a>算法代码剖析</h2><p>零一背包问题其实可以简化为这些物品选还是不选的问题，那么我们可以进行编码：我们创建一个物品数量大小的数组，里面只存0和1，1代表我选了这个物品，0代表没选，这个数组就是一个方案的编码，也称作染色体，其中每个0或1称作基因。而我们的种群，就是有很多的方案，每个方案，就是一个个体。</p><p>所以你要明白，我们的遗传算法一开始就是随机的给出一定数目（种群大小）的解决方案，然后让它们模拟生物进化，适应值（得到的物品价值总和）越好的就越有机会留下来。留下来的进行杂交，最后经过很多次迭代后留下的就是最好的结果了。</p><p>为了避免出现结果是局部最优，比如爬山，有很多山，当种群到达一个中等高度的山顶的时候，它们发现周围的地形都比它们的位置低了，于是就认为这是最高的了（局部最优），就安于现状不动了，觉得到达世界之颠了。实际上在周围可能还有更高的山，超出了它们的视野范围。</p><p>所以要引入变异，让有的个体随机蹦到更远的地方，它就有可能蹦到比局部最优更好的地方，在大量的迭代下就能避免其他个体安于局部最优，从而让种群向发现更高山的那个个体靠近，最后得到最好的结果。</p><p>但是要注意，智能优化算法能保证一个能让人接受的结果，但并不代表严格数学意义上的最优值。</p><p>以下是实现代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">numOfItems = <span class="number">10</span></span><br><span class="line"><span class="comment"># numOfItems = 5</span></span><br><span class="line"><span class="comment"># numOfItems = 6</span></span><br><span class="line"><span class="comment"># numOfItems = 7</span></span><br><span class="line"></span><br><span class="line">capacityOfBag = <span class="number">165</span></span><br><span class="line">spaceOfItems = [<span class="number">23</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">44</span>, <span class="number">53</span>, <span class="number">38</span>, <span class="number">63</span>, <span class="number">85</span>, <span class="number">89</span>, <span class="number">82</span>]</span><br><span class="line">valueOfItems = [<span class="number">92</span>, <span class="number">57</span>, <span class="number">49</span>, <span class="number">68</span>, <span class="number">60</span>, <span class="number">43</span>, <span class="number">67</span>, <span class="number">84</span>, <span class="number">87</span>, <span class="number">72</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># capacityOfBag = 26</span></span><br><span class="line"><span class="comment"># spaceOfItems = [12, 7, 11, 8, 9]</span></span><br><span class="line"><span class="comment"># valueOfItems = [24, 13, 23, 15, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># capacityOfBag = 190</span></span><br><span class="line"><span class="comment"># spaceOfItems = [56, 59, 80, 64, 75, 17]</span></span><br><span class="line"><span class="comment"># valueOfItems = [50, 50, 64, 46, 50, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># capacityOfBag = 50</span></span><br><span class="line"><span class="comment"># spaceOfItems = [31, 10, 20, 19, 4, 3, 6]</span></span><br><span class="line"><span class="comment"># valueOfItems = [70, 20, 39, 37, 7, 5, 10]</span></span><br><span class="line"></span><br><span class="line">numOfPop = <span class="number">50</span></span><br><span class="line"><span class="comment">#种群二维数组，同时随机初始化（50 x 10）</span></span><br><span class="line">population = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, size=(numOfPop, numOfItems))</span><br><span class="line"><span class="comment">#种群适应值初始化（50）</span></span><br><span class="line">popFitness = np.zeros(numOfPop)</span><br><span class="line"><span class="comment">#交叉率</span></span><br><span class="line">crossoverRate = <span class="number">0.8</span></span><br><span class="line"><span class="comment">#变异率</span></span><br><span class="line">mutationRate = <span class="number">0.05</span></span><br><span class="line"><span class="comment">#迭代次数</span></span><br><span class="line">generations = <span class="number">100</span></span><br><span class="line"><span class="comment">#惩罚函数系数（注意如果设置太小会出现有的结果惩罚力度不够导致结果错误）</span></span><br><span class="line">punishmentCoe = <span class="number">10.0</span></span><br><span class="line"><span class="comment">#每次迭代最好记录</span></span><br><span class="line">allBest = np.zeros(generations)</span><br><span class="line"></span><br><span class="line"><span class="comment"># author:Christoper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#适应值函数，判断一个个体的优劣</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(gene, space, value, capacity, punish)</span>:</span></span><br><span class="line">    <span class="comment">#获取当前组合的价值总和</span></span><br><span class="line">    fit = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numOfItems):</span><br><span class="line">        fit += value[i] * gene[i]</span><br><span class="line">    <span class="comment">#获取当前组合的空间总和</span></span><br><span class="line">    size = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numOfItems):</span><br><span class="line">        size += space[i] * gene[i]</span><br><span class="line">    <span class="comment">#如果空间超出了，说明该组合是不行的，就对该算法惩罚性降低其适应值</span></span><br><span class="line">    <span class="keyword">if</span> size &gt; capacity:</span><br><span class="line">        fit -= punish * (size - capacity)</span><br><span class="line">    <span class="keyword">return</span> fit</span><br><span class="line"></span><br><span class="line"><span class="comment">#进行迭代</span></span><br><span class="line"><span class="keyword">for</span> iteration <span class="keyword">in</span> range(<span class="number">0</span>, generations):</span><br><span class="line">    <span class="comment">#计算每个个体的适应值</span></span><br><span class="line">    <span class="keyword">for</span> index, individual <span class="keyword">in</span> enumerate(population):</span><br><span class="line">        popFitness[index] = func(gene=individual, space=spaceOfItems, value=valueOfItems, capacity=capacityOfBag, punish=punishmentCoe)</span><br><span class="line">    <span class="comment">#获得种群中最高的适应值</span></span><br><span class="line">    maxFit = popFitness.max()</span><br><span class="line">    <span class="comment">#获取种群中最低的适应值</span></span><br><span class="line">    minFit = popFitness.min()</span><br><span class="line">    <span class="comment">#获得最佳个体的索引</span></span><br><span class="line">    maxIndex = np.argmax(popFitness)</span><br><span class="line">    <span class="comment">#通过索引获得最佳个体的基因序列（即组合序列）</span></span><br><span class="line">    bestIndividual = population[maxIndex]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#归一化</span></span><br><span class="line">    <span class="keyword">for</span> index, fitness <span class="keyword">in</span> enumerate(popFitness):</span><br><span class="line">        popFitness[index] = (fitness - minFit) / (maxFit - minFit)</span><br><span class="line">    </span><br><span class="line">    sumFit = popFitness.sum()</span><br><span class="line">    <span class="comment">#然后每个的优劣程度与总和的比就构成了转盘中它们所占块的大小</span></span><br><span class="line">    fitRatio = popFitness / sumFit</span><br><span class="line">    <span class="comment">#把除第一个外，每一个个体的优劣程度与之前的进行累加，那么就能形成很多连续的区间，好利于之后循环判断</span></span><br><span class="line">    fitRatio = np.cumsum(fitRatio)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#转针随机数组，大小和种群大小相同</span></span><br><span class="line">    pointer = np.random.random(numOfPop)</span><br><span class="line">    <span class="comment">#把这些转针转到的位置从小到大进行排序，就可以和对应的个体在转盘中的位置进行比较</span></span><br><span class="line">    pointer.sort()</span><br><span class="line">    <span class="comment">#初始化一个新的空种群，用来作为经选择、交叉、变异后的后一代种群</span></span><br><span class="line">    newPopulation = np.zeros((numOfPop, numOfItems), dtype=int)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#进行选择</span></span><br><span class="line">    <span class="comment">#当前要进行复制的下一代的索引</span></span><br><span class="line">    newPopIndex = <span class="number">0</span></span><br><span class="line">    <span class="comment">#前一代候选的个体的索引</span></span><br><span class="line">    fitRatioIndex = <span class="number">0</span></span><br><span class="line">    <span class="comment">#种群遍历</span></span><br><span class="line">    <span class="keyword">while</span> newPopIndex &lt; numOfPop:</span><br><span class="line">        <span class="keyword">if</span> pointer[newPopIndex] &lt; fitRatio[fitRatioIndex]:</span><br><span class="line">            newPopulation[newPopIndex] = population[fitRatioIndex]</span><br><span class="line">            newPopIndex += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fitRatioIndex += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, numOfPop, <span class="number">2</span>):</span><br><span class="line">        <span class="comment">#获得一个0到1的随机小数</span></span><br><span class="line">        p = np.random.random()</span><br><span class="line">        <span class="comment">#按概率进行操作，小于我们设置的交叉概率我们才进行交叉</span></span><br><span class="line">        <span class="keyword">if</span> p &lt; crossoverRate:</span><br><span class="line">            <span class="comment">#这是一个随机获得的选择数组，如果是0，则这个位置的基因不进行交叉，1则进行交叉</span></span><br><span class="line">            crossChoice = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, numOfItems)</span><br><span class="line">            <span class="comment">#遍历当前个体的每个基因</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, numOfItems):</span><br><span class="line">                <span class="comment">#判断选择数组这个位置的值</span></span><br><span class="line">                <span class="keyword">if</span> crossChoice[j] == <span class="number">1</span>:</span><br><span class="line">                    <span class="comment">#这是一个标准的值交换步骤，它是当前个体与后面一个个体进行的，所以步幅长度为2</span></span><br><span class="line">                    temp = newPopulation[i][j]</span><br><span class="line">                    newPopulation[i][j] = newPopulation[i + <span class="number">1</span>][j]</span><br><span class="line">                    newPopulation[i + <span class="number">1</span>][j] = temp</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#基于概率的变异操作</span></span><br><span class="line">    <span class="comment">#遍历每个个体</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(<span class="number">0</span>, numOfPop):</span><br><span class="line">        <span class="comment">#遍历个体的每个基因</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>, numOfItems):</span><br><span class="line">            <span class="comment">#获得一个0到1之间的随机小数</span></span><br><span class="line">            p = np.random.random()</span><br><span class="line">            <span class="comment">#如果这个小数小于我们设置的变异几率，才进行变异</span></span><br><span class="line">            <span class="keyword">if</span> p &lt; mutationRate:</span><br><span class="line">                <span class="comment">#变异很简单，就是0变1，1变0，即选择物品我不要了，没选的则选上</span></span><br><span class="line">                <span class="keyword">if</span> newPopulation[m][n] == <span class="number">0</span>:</span><br><span class="line">                    newPopulation[m][n] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    newPopulation[m][n] = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    population = newPopulation.copy()</span><br><span class="line">    <span class="comment">#同时保留最优的个体在第一个位置中（万一这么好的家伙被前面的步骤搞没了呢？）</span></span><br><span class="line">    population[<span class="number">0</span>] = bestIndividual</span><br><span class="line">    <span class="comment">#同时将每代中最好的适应值存储，其最后一个也就是我们迭代结束后的最终结果</span></span><br><span class="line">    allBest[iteration] = maxFit</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出最终最好的结果</span></span><br><span class="line">print(allBest[<span class="number">-1</span>])</span><br><span class="line">print(bestIndividual)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这里是绘图过程</span></span><br><span class="line">x = range(<span class="number">0</span>, generations)</span><br><span class="line">plt.scatter(x, allBest)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>得到的结果：</p><p><img src="result.png" alt></p><p>绘图跟踪每次迭代：<br><img src="graph.png" alt></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在写这个算法之前，我还从没写过Python，原本是打算用C++写的，但是我参考的是《智能优化算法及其MATLAB实例（第2版）》，里面都是Matlab实现，要用C++写出类似思想的算法真的很僵硬。而我不是很喜欢Matlab的语法，加上Matlab正版软件太贵了，学校没有购买，尽量还是不用盗版吧。早闻Numpy的大名，也听说Python不是很难，所以我用一个上午的时间查资料熟悉了一下Python的语法和Numpy的使用，粗略写下了如上算法，如果在阅读过程中有Python大佬发现我的语法不规范还请谅解。（不得不说Python的语法真是放飞自我）</p><h2 id="关于引用"><a href="#关于引用" class="headerlink" title="关于引用"></a>关于引用</h2><p>如果有需要转载文章或者使用源代码，只需要在文首加上：<br>原作者：Christoper Hoy<br>作者Blog：<a href="https://hoyyy.me" target="_blank" rel="noopener">https://hoyyy.me</a></p><p>十分感谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在上智能优化技术的课程，它主要讨论的是使系统达到最优的目标的算法，通常是找到某个多变量函数的极大值或者极小值。因为在实际工程问题中，有很
      
    
    </summary>
    
      <category term="Intelligent Optimization Algorithms" scheme="http://hoyyy.com/categories/Intelligent-Optimization-Algorithms/"/>
    
    
      <category term="Python" scheme="http://hoyyy.com/tags/Python/"/>
    
      <category term="遗传算法" scheme="http://hoyyy.com/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
      <category term="零一背包问题" scheme="http://hoyyy.com/tags/%E9%9B%B6%E4%B8%80%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>最终决定还是要写博客了！</title>
    <link href="http://hoyyy.com/2019/03/18/%E6%9C%80%E7%BB%88%E5%86%B3%E5%AE%9A%E8%BF%98%E6%98%AF%E8%A6%81%E5%86%99%E5%8D%9A%E5%AE%A2%E4%BA%86%EF%BC%81/"/>
    <id>http://hoyyy.com/2019/03/18/最终决定还是要写博客了！/</id>
    <published>2019-03-18T13:21:27.000Z</published>
    <updated>2019-03-19T00:04:59.607Z</updated>
    
    <content type="html"><![CDATA[<p>Hi! 看到这篇文章的朋友们你们好啊!</p><p>早在两年前，我加入了一个互联网团队，小组建议每个人都有自己的个人技术博客，定期更新，勉励自己多学习新知识，同时也能够为未来面向就业时有可以让别人了解自己的参考资料。</p><p>但是我当时还是大一，一来自己知识量不足，且不说建立博客这个过程了，能分享的东西也极其有限，加上自己意志力也不是很足，导致这个事情一直被拖着，写过一些东西自己又觉得没什么水平，后来就不了了之了。</p><p>过了两年之后，在学习的过程中，随着了解的东西越来越多，愈发感到它们暗中连成的庞大体系。尤其是刷leetcode和PAT过程中，很多知识的复用，以及我自己做一些小型程序或者app的时候产生的一些心得，让我特别热切地想把所有碎片都重新整理一遍，从而形成一个扎实的专业基础。</p><p>我当机立断认为到了写博客的时候了。甚至一开始我还是想用笔记本（真的是纸质的笔记本）这种传统方式去记录自己的学习历程，但是这对于我们专业来说显得太违和了……</p><p>所以在接下来的时间里，我会不定期的更新自己的经验总结，当然你会看到很多很基础的、在别的地方也能看到的东西，这是因为我还是想通过这种方式去让自己系统地、全面地去了解一些概念，而不是像以前一样抱着只要在这个地方能用，其他的我就不管的心态去学习，也就是需求驱动的学习。</p><p>我觉得一定要抱着好奇心去学习，随着兴趣去学习，感受知识背后的故事。纯粹享受知识本身所带来的那种满足好奇心的快感，也使我真正感受到，知识就是力量不是一句空话。</p><p>也祝各位看到这篇文章的朋友能实现自己的理想，生活开心！也希望我的一点微薄的努力能帮助到你！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hi! 看到这篇文章的朋友们你们好啊!&lt;/p&gt;
&lt;p&gt;早在两年前，我加入了一个互联网团队，小组建议每个人都有自己的个人技术博客，定期更新，勉励自己多学习新知识，同时也能够为未来面向就业时有可以让别人了解自己的参考资料。&lt;/p&gt;
&lt;p&gt;但是我当时还是大一，一来自己知识量不足，
      
    
    </summary>
    
      <category term="Tiktok" scheme="http://hoyyy.com/categories/Tiktok/"/>
    
    
  </entry>
  
</feed>
